@page "/BattleshipGame"
@using Battleship.Game
@using Battleship.Model
@inject HttpClient Http
@inject IEngine Engine

<PageTitle>Battleship Game</PageTitle>

@if ((squares == null || gridSize == 0) && (isError == false))
{
    <p><em>Loading...</em></p>
}
else
{
    <GameGrid squares=squares size=gridSize></GameGrid>
    <br />

    <div hidden=@isError>
        <input type="text" @bind-value="textInput" disabled=@hasGameEnded>
        <input type="button" disabled=@hasGameEnded value="Shot" @onclick=ShotOnClick>
        <input type="button" disabled=@(hasGameEnded == false) value="Play again" @onclick=PlayAgainOnClick>
    </div>

    <div hidden=@(isError == false) class="alert alert-danger" role="alert">
        Error: @errorMessage
    </div>
}

@code {
    private SquareState[,]? squares = null;
    private int gridSize = 0;
    private string textInput;
    private bool hasGameEnded;
    private bool isError;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        PrepareGame();

        (isError, errorMessage) = Engine.GetError();
    }

    public async Task ShotOnClick() 
    {
        squares = Engine.Shot(textInput);
        textInput = string.Empty;
        hasGameEnded = Engine.HasGameEnded();
        if (hasGameEnded)
        {
            textInput = "FINISH";
        }

        (isError, errorMessage) = Engine.GetError();
    }

    public async Task PlayAgainOnClick() 
    {
        PrepareGame();

        (isError, errorMessage) = Engine.GetError();
    }
    
    private void PrepareGame()
    {
        textInput = string.Empty;
        hasGameEnded = false;

        squares = Engine.CraeteGrid();
        gridSize = Engine.GetGridSize();
    }
}
